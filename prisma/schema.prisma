generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}
// change to autoIncrement() when using cockroachdb
model User {
  id          String        @id @unique @default(uuid())
  userName    String        @unique
  email       String        @unique
  password    String?
  avatarUrl   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  role        Role          @default(USER)
  miniPostsWithImage MiniPostWithImage[]
  accounts    Account[]
  tokens      Token[]
  profile     Profile[]
  japanImages JapanImages[]
  travelLogs  TravelLog[]
  posts       Post[]
  likes       Like[]
  favorites   Favorite[]
  projects    Project[]
  comments    Comment[]
  images      ImageTest[]
  miniposts  MiniPost[]
  chats Chat[]
  messages Message[]
  about About[]
}


model JapanImages {
  id             Int     @id @unique @default(sequence())
  imageUrl       String
  imgTitle       String?
  imgDescription String?
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
}

model TravelLog {
  id             Int     @id @unique @default(sequence())
  imageUrl         String
  imageTitle       String?
  imageDescription String?
  // album describes the primary destination
  album            String
  city             String
  year             String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Project {
  id          String     @id @unique @default(uuid())
  title       String
  description String
  projectImg  String
  projectUrl  String
  githubUrl   String
  categories  Category[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
}

model Post {
  id          String     @id @unique @default(uuid())
  title       String
  description String
  body        String
  imageUrl    String
  createdBy   String
  published   Boolean    @default(false)
  featured    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  favorites   Favorite[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String

  categories Category[]
  likes      Like[]

  @@index([id, userId])
  @@index([userId])
}

model Comment {
  id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("comment_children")
  parentId  String?
}

model Category {
  id       String    @id @unique @default(uuid())
  label    String
  value    String    @unique
  posts    Post[]
  projects Project[]
}

model About {
  id             String   @id @unique @default(uuid())
  userName       String   @unique
  firstName      String
  lastName       String
  bio            String
  location       String
  education      String
  occupation     String
  profilePicture String   @default("https://res.cloudinary.com/dch-photo/image/upload/v1672092441/stock/image_FILL0_wght400_GRAD0_opsz48_loo0xo.png")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  email String
  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Profile {
  id             String   @id @unique @default(uuid())
  userName       String   @unique
  firstName      String
  lastName       String
  bio            String
  location       String
  education      String
  occupation     String
  profilePicture String   @default("https://res.cloudinary.com/dch-photo/image/upload/v1672092441/stock/image_FILL0_wght400_GRAD0_opsz48_loo0xo.png")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String  @unique
  email          String
}

model Favorite {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}



model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([token, type])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model ImageTest {
  id             Int     @id @unique @default(sequence())
  imageUrl String
  title    String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
}

model MiniPost {
  id String @id @default(uuid())
  message String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model MiniPostWithImage {
  id String @id @default(uuid())
  message String
  imageUrl String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
model Chat {
  id String @id @default(cuid())
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users User[]
  messages Message[]
}

model Message {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId String
}
enum Role {
  ADMIN
  USER
  MEMBER
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}
